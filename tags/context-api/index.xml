<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Context API on KMS&#39;s blog</title>
    <link>https://kms-97.github.io/tags/context-api/</link>
    <description>Recent content in Context API on KMS&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <managingEditor>개별설정 (개별설정)</managingEditor>
    <webMaster>개별설정 (개별설정)</webMaster>
    <lastBuildDate>Thu, 09 Sep 2021 05:31:00 +0900</lastBuildDate><atom:link href="https://kms-97.github.io/tags/context-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(3) - 블럭 만들기</title>
      <link>https://kms-97.github.io/project/react_blockgame3/</link>
      <pubDate>Thu, 09 Sep 2021 05:31:00 +0900</pubDate>
      <author>개별설정 (개별설정)</author>
      <guid>https://kms-97.github.io/project/react_blockgame3/</guid>
      <description>블럭 오브젝트 만들기 줄곧 빈 칸으로 있던 ObjectList.js를 먼저 채워주기로 했다. 하나의 파일 안에 코드를 몰아넣으면 복잡해질 것 같아 생성하는 함수는 따로 작성하여 import 해주기로 했다.
ObjectUtil.js
const blockShape = [ [[1]], [[0,1],[1,1]], [[1,1],[1,1]], [[1,0,0],[1,1,1]], [[0,1,0],[1,1,1]], [[0,0,1],[1,1,1]], [[0,0,1],[0,0,1],[1,1,1]], [[1,1,1],[1,1,1],[1,1,1]], ] // 블럭 모양 설정  const blockColor = [ &amp;#39;black&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;purple&amp;#39;, &amp;#39;yellowgreen&amp;#39; ] // 블럭 색깔 설정  const rotate = [ 0, 90, 180, 270 ] // 블럭 회전  const randomNumber = () =&amp;gt; { return ({ shape: Math.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(4) - 블럭 넣기 구현</title>
      <link>https://kms-97.github.io/project/react_blockgame4/</link>
      <pubDate>Thu, 09 Sep 2021 05:31:00 +0900</pubDate>
      <author>개별설정 (개별설정)</author>
      <guid>https://kms-97.github.io/project/react_blockgame4/</guid>
      <description>게임판 좌표 가져오기 블럭을 드래그&amp;amp;드롭 할 때, 게임판 위에 위치하는지와 어느 칸에 삽입하는지를 알기 위해 게임판의 좌표를 가져와야할 필요가 있다.
ObjectList.js
... useEffect(() =&amp;gt; { const container = document.getElementById(&amp;#34;top-gameboard-container&amp;#34;) const boundary = container.getBoundingClientRect() return ( console.log(boundary) // 확인용  ) } ) ... useEffect를 사용하여 DOM이 렌더링되고 난 이후 게임판의 좌표를 getBoundingCilentRect() 통해서 가져오고자 했다.
결과는 에러였는데, 서로 다른 컴포넌트에서 렌더링되어 useEffect로 접근이 불가능한 듯하다. 이를 해결하기 위해서 context를 통한 전역변수로 사용하고자 했는데, 게임판의 좌표 외에 각 격자마다의 좌표, 삽입할 경우의 style 또는 state 변경 등을 생각하면 모두 context로 전달하기에는 너무 복잡해질 것 같았다.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(2) - Context API</title>
      <link>https://kms-97.github.io/project/react_blockgame2/</link>
      <pubDate>Thu, 09 Sep 2021 05:30:00 +0900</pubDate>
      <author>개별설정 (개별설정)</author>
      <guid>https://kms-97.github.io/project/react_blockgame2/</guid>
      <description>Context API 도입 (1)에서 만들었던 화면에서는 게임 모드를 선택해도 게임판의 격자가 바뀌지 않았다. Gamemode.js의 state가 Gameboard.js로 전달되지 않아서인데, state를 공통 상위 컴포넌트로 올려도 되지만 이후 게임판의 좌표를 통해서 드래그&amp;amp;드롭되는 위치를 확인할 계획이기 때문에 컴포넌트 간 여러 변수를 공유할 계획으로 전역변수를 위한 Context API를 사용해 보기로 했다.
context/GameData.js
const GameDataContext = createContext({ state: { gamemode : 7, }, actions : { setGamemode: () =&amp;gt; {}, } }) const GameDataProvider = ({ children }) =&amp;gt; { const [gamemode, setGamemode] = useState(7) const context = { state : { gamemode }, actions : { setGamemode } } return ( &amp;lt;GameDataContext.</description>
    </item>
    
  </channel>
</rss>
