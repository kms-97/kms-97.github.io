<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on KMS&#39;s blog</title>
    <link>https://kms-97.github.io/tags/javascript/</link>
    <description>Recent content in javascript on KMS&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <managingEditor>msg016@naver.com (Kim Min Su)</managingEditor>
    <webMaster>msg016@naver.com (Kim Min Su)</webMaster>
    <lastBuildDate>Thu, 23 Dec 2021 11:50:00 +0900</lastBuildDate><atom:link href="https://kms-97.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTML5 Canvas - 불꽃놀이</title>
      <link>https://kms-97.github.io/project/canvas/canvas_firework/</link>
      <pubDate>Thu, 23 Dec 2021 11:50:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/canvas/canvas_firework/</guid>
      <description>시작 유튜브 Interactive Developer님의 HTML5 Canvas Tutorial 영상을 보고 관심을 가지게 되어서, 간단히 캔버스를 클릭하면 불꽃이 터지는 효과를 만들어보기로 했다. 강의에서 클래스로 기능을 구현하시는 걸 따라하며 겸사겸사 연습하기로.
구현 가장 처음으로 기본세팅.
index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;app.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; style.css
* { outline: 0; margin: 0; padding: 0; } html { width: 100%; height: 100%; } body { width: 100%; height: 100%; background-color: #ffffff; } canvas { width: 100%; height: 100%; } app.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(7) - 게임 오버 팝업</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame7/</link>
      <pubDate>Tue, 12 Oct 2021 18:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame7/</guid>
      <description>게임 오버 팝업 띄우기 더 이상 블럭을 넣을 수 없을 때 나오는 팝업은 화면 전체를 가려야하기 때문에 root가 아닌 동등한 레벨의 새로운 노드로 넣어줘야 할 필요가 있었다. 이를 구현하기 위해 리액트의 Portals를 사용하기로 하였다.
팝업창 만들기 GameoverModel.js
import { useContext } from &amp;#39;react&amp;#39; import ReactDOM from &amp;#39;react-dom&amp;#39; import GameModeContext from &amp;#39;./context/GameMode&amp;#39; import GameScoreContext from &amp;#39;./context/GameScore&amp;#39; import &amp;#39;./GameoverModal.css&amp;#39; const GameoverModal = () =&amp;gt; { const gameMode = useContext(GameModeContext) const gameScore = useContext(GameScoreContext) const link = document.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(6) - 게임 오버</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame6/</link>
      <pubDate>Mon, 11 Oct 2021 18:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame6/</guid>
      <description>게임 오버 판별 블록을 게임판에 하나 둘 때마다, 남은 칸에 넣을 수 있는 블럭이 1개 이상 있는지 판별하여, 불가능한 경우 게임 오버로 판정해야한다.
그러려면 3개의 블럭 형태를 모두 게임판과 비교하여 확인해야하는데, 기존의 블럭 형태로는 어려워 생성 로직에 약간 수정이 필요했다.
블럭 생성 함수 수정 BlockUtil.js
const blockShape = [ [[1]], [[0,1],[1,1]], [[1,1],[1,1]], [[1,0,0],[1,1,1]], [[0,1,0],[1,1,1]], [[1],[1]], [[0,0,1],[1,1,1]], [[1,1,1]], [[0,0,1],[0,0,1],[1,1,1]], [[1,1,1],[0,0,1],[0,0,1]], [[1,1,1],[1,1,1],[1,1,1]], ] ... const rotateShape = (shape, rotate) =&amp;gt; { let rotated = [] const row = shape[0].</description>
    </item>
    
    <item>
      <title>Javscript - Promise, async/await</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4/</link>
      <pubDate>Wed, 29 Sep 2021 07:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4/</guid>
      <description>Promise Promise 객체는 두 개의 내부 프로퍼티를 갖는다.
 state : 진행 상태. pending(보류) / fulfilled(이행) / rejected(거부) / settled(완료)로 나뉨. result : 결과. 진행 중 revolve(value)를 만나면 value로, reject(error)를 만나면 error로 바뀜.  활용 const promise = (props) =&amp;gt; { return new Promise((revolve, reject) =&amp;gt; { // Do something...  if () {revolve(result)} reject(error) }) } // 프로미스 체이닝 promise(props).then((result) =&amp;gt; { // Do something...  return result }).then((result) =&amp;gt; { // Do something.</description>
    </item>
    
    <item>
      <title>Javscript - 클래스</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Tue, 28 Sep 2021 23:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>클래스 자바스크립트에서의 클래스는 함수의 한 종류로, 생성자의 기능을 대체하여 상속을 보다 간결하게 작성할 수 있음.
별도의 문법을 사용하여 메소드 또는 프로퍼티 등을 선언할 수 있음.
단, 단순한 편의 문법이 아닌 다음과 같은 차이점을 가진다.
 반드시 new와 함께 사용해야 함. 클래스의 메서드는 열거할 수 없음. 즉, for...in을 통한 순회 시 메서드는 제외됨. 항상 엄격 모드(use strict)로 실행됨.  기본 문법 class User { //클래스 필드  isHuman = true; //생성자  constructor(name, age) { this.</description>
    </item>
    
    <item>
      <title>Javscript - 이터레이션 프로토콜</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98/</link>
      <pubDate>Tue, 28 Sep 2021 21:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98/</guid>
      <description>이터레이션 프로토콜 이터레이션 프로토콜(iteration protocol)은 데이터 컬렉션을 순회하기 위한 규칙.
이를 준수한 객체는 for...of로 순회 가능하고 Spread 문법의 피연산자가 될 수 있다.
이터러블 이터러블 프로토콜을 준수한 객체를 이터러블이라 하며, Symbol.iterator 메소드를 구현하거나 상속한 객체를 말한다.
배열은 이터러블이며, 일반 객체는 아니다.
const array = [1,2,3]; alert(Symbol.iterator in array); //true  const obj = {a:1, b:2, c:3}; alert(Symbol.iterator in obj); //false ES6에서 제공하는 빌트인 이터러블은 다음과 같다.
Array, String, Map, Set, TypedArray(Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,Int32Array, Uint32Array, Float32Array, Float64Array), DOM data structure(NodeList, HTMLCollection), Arguments 이터레이터 이터레이터 프로토콜은 next 메서드를 가지고 있어야 하며, next 메서드는 반복이 끝났는지에 대한 done 프로퍼티와 이터레이터로부터 반환되는 값인 value 프로퍼티를 갖는 객체를 반환해야 한다.</description>
    </item>
    
    <item>
      <title>Javscript - 생성자 함수와 프로토타입</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</link>
      <pubDate>Tue, 28 Sep 2021 18:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</guid>
      <description>생성자 함수 일반적으로 객체 리터럴 {...}을 통해 객체를 생성하지만, 유사한 객체를 여러 개 생성해야 할 때 new 연산자와 생성자 함수를 사용.
생성자 함수의 선언은 일반 함수와 큰 차이가 없지만 두 가지 관례를 따름.
 함수 이름의 첫 글자는 대문자로 시작. 반드시 new연산자를 붙여 실행.  function User(name, sex, age) { this.name = name; this.sex = sex; this.age = age; this.isAdmin = false; } let user = new User(&amp;#39;John&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;21&amp;#39;); alert(user.</description>
    </item>
    
    <item>
      <title>Javscript - 객체 프로퍼티</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%EA%B0%9D%EC%B2%B4%EC%86%8D%EC%84%B1/</link>
      <pubDate>Tue, 28 Sep 2021 16:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%EA%B0%9D%EC%B2%B4%EC%86%8D%EC%84%B1/</guid>
      <description>객체 프로퍼티 객체의 프로퍼티는 두 가지로 분류된다.
 데이터 프로퍼티 : 키와 값으로 분류된 일반적인 프로퍼티. 접근자 프로퍼티 : 자체적으로 값을 가지지 않고, 다른 데이터 프로퍼티의 값에 접근할 때 호출되는 접근자 함수(set, get)으로 구성된 프로퍼티  데이터 프로퍼티 데이터 프로퍼티는 값(value)과 함께 특별한 세 가지의 속성(플래그, flag)을 가짐.
 writable : 값 수정 enumerable : 반복을 통한 나열 configurable : 프로퍼티 삭제 또는 플래그 수정  일반적인 선언(지금까지 하던 객체 프로퍼티 선언)으로는 기본값인 true로 설정됨.</description>
    </item>
    
    <item>
      <title>Javscript - 객체</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%EA%B0%9D%EC%B2%B4/</link>
      <pubDate>Wed, 15 Sep 2021 16:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%EA%B0%9D%EC%B2%B4/</guid>
      <description>객체 선언 const obj = new Object() const obj = {} 두 방법에 큰 차이는 없으나 객체 리터럴 방법(2번째)이 가독성과 성능 등의 이유로 권장됨
프로퍼티 생성 const person = { name: &amp;#39;kim&amp;#39;, age: 25, } // 선언 시 입력  person.bloodtype = &amp;#39;A&amp;#39; // 동적 선언 프로퍼티의 값으로는 어떤 자료형이든 가능
const person ={ name: &amp;#39;kim&amp;#39;, age: 25, live: true, friends: [&amp;#39;song&amp;#39;, &amp;#39;ho&amp;#39;, &amp;#39;kang&amp;#39;], say: function(word) { alert(`${this.name}: ${word}`) } } 프로퍼티 접근 const person = { name: &amp;#39;kim&amp;#39;, age: 25, } person.</description>
    </item>
    
    <item>
      <title>Javscript - 연산자</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%EC%97%B0%EC%82%B0%EC%9E%90/</link>
      <pubDate>Wed, 15 Sep 2021 16:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%EC%97%B0%EC%82%B0%EC%9E%90/</guid>
      <description>이항 연산자    연산자 설명 예시     + 덧셈 연산자 2 + 3   - 뺄셈 연산자 7 - 2   * 곱셈 연산자 5 * 1   / 나눗셈 연산자 35 / 7   % 나머지 연산자 41 % 6   ** 제곱 연산자 3 ** 2    단항 연산자    연산자 설명 예시     + 단항 덧셈 연산자 +2</description>
    </item>
    
    <item>
      <title>Javscript - 자료형</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%EC%9E%90%EB%A3%8C%ED%98%95/</link>
      <pubDate>Wed, 15 Sep 2021 16:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%EC%9E%90%EB%A3%8C%ED%98%95/</guid>
      <description>원시형 숫자형 (2^53-1)부터 -(2^53-1)사이의 정수와 부동소수점 방식으로 표현된 실수
const int = 3; // 정수 선언 const float = 7.12; // 실수 선언 const floatToInt = parseInt(float); // 7 const intTofloat = int.toFixed(3); // &amp;#34;3.000&amp;#34; const StringToFloat = parseFloat(&amp;#39;6.84px&amp;#39;); // 6.84 const StringToInt = parseInt(&amp;#39;6.84px&amp;#39;); // 6 무한대(Infinity) Infinity 또는 -Infinity로 표현
const inf = 3/0; // Infinity const infDeclare = Infinity // 선언 inf === Infinify // true // 판별 isFinite(inf) // false NaN 아래의 경우 NaN을 반환</description>
    </item>
    
    <item>
      <title>Javscript - 함수</title>
      <link>https://kms-97.github.io/study/javascript/javascript_%ED%95%A8%EC%88%98/</link>
      <pubDate>Wed, 15 Sep 2021 16:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/study/javascript/javascript_%ED%95%A8%EC%88%98/</guid>
      <description>함수 자바스크립트에서 함수는 기본적인 구성 블럭 중 하나
함수 사용을 위해서는 함수를 호출하고자 하는 범위 내에서 정의해야함
선언 선언문 function 함수명(매개변수) { 함수 식 return 반환값 } 표현식 let myFucn = function(매개변수) { 함수 식 return 반환값 } 화살표 함수 표현식 let myFunc = (매개변수) =&amp;gt; { 함수 식 return 반환값 } let myFunc = 변수 =&amp;gt; 결과 // 인자가 하나라면 괄호 생략 가능 함수 선언문은 호이스팅되지만, 표현식은 인터프리터가 해당 줄에 도달해야 로드됨</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(5) - 점수 올리기</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame5/</link>
      <pubDate>Mon, 13 Sep 2021 19:10:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame5/</guid>
      <description>점수 기능 구현 게임판의 칸이 세로 또는 가로로 한 줄이 전부 채워지면 해당 줄을 지우고 점수를 올려야한다.
점수 관리 GameData.js
import React, { useState, createContext } from &amp;#34;react&amp;#34;; const GameDataContext = createContext({ state: { gamemode : 7, score : 0 }, actions : { setGamemode: () =&amp;gt; {}, setScore: () =&amp;gt; {}, } }) const GameDataProvider = ({ children }) =&amp;gt; { const [gamemode, setGamemode] = useState(7) const [score, setScore] = useState(0) const context = { state : { gamemode, score }, actions : { setGamemode, setScore } } return ( &amp;lt;GameDataContext.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(4) - 블럭 넣기 구현</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame4/</link>
      <pubDate>Sun, 12 Sep 2021 21:00:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame4/</guid>
      <description>게임판 상호작용 블럭을 드래그&amp;amp;드롭 할 때, 게임판 위에 위치하는지와 어느 칸에 삽입하는지를 알기 위해 게임판의 좌표를 가져와야할 필요가 있다.
ObjectList.js
... useEffect(() =&amp;gt; { const container = document.getElementById(&amp;#34;top-gameboard-container&amp;#34;) const boundary = container.getBoundingClientRect() return ( console.log(boundary) // 확인용  ) } ) ... useEffect를 사용하여 DOM이 렌더링되고 난 이후 게임판의 좌표를 getBoundingCilentRect() 통해서 가져오고자 했다.
결과는 에러였는데, 서로 다른 컴포넌트에서 렌더링되어 useEffect로 접근이 불가능한 듯하다. 이를 해결하기 위해서 context를 통한 전역변수로 사용하고자 했는데, 게임판의 좌표 외에 각 격자마다의 좌표, 삽입할 경우의 style 또는 state 변경 등을 생각하면 모두 context로 전달하기에는 너무 복잡해질 것 같았다.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(3) - 블럭 만들기</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame3/</link>
      <pubDate>Thu, 09 Sep 2021 05:31:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame3/</guid>
      <description>블럭 오브젝트 만들기 줄곧 빈 칸으로 있던 ObjectList.js를 먼저 채워주기로 했다. 하나의 파일 안에 코드를 몰아넣으면 복잡해질 것 같아 생성하는 함수는 따로 작성하여 import 해주기로 했다.
ObjectUtil.js
const blockShape = [ [[1]], [[0,1],[1,1]], [[1,1],[1,1]], [[1,0,0],[1,1,1]], [[0,1,0],[1,1,1]], [[0,0,1],[1,1,1]], [[0,0,1],[0,0,1],[1,1,1]], [[1,1,1],[1,1,1],[1,1,1]], ] // 블럭 모양 설정  const blockColor = [ &amp;#39;black&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;purple&amp;#39;, &amp;#39;yellowgreen&amp;#39; ] // 블럭 색깔 설정  const rotate = [ 0, 90, 180, 270 ] // 블럭 회전  const randomNumber = () =&amp;gt; { return ({ shape: Math.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(2) - Context API</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame2/</link>
      <pubDate>Thu, 09 Sep 2021 05:30:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame2/</guid>
      <description>Context API 도입 (1)에서 만들었던 화면에서는 게임 모드를 선택해도 게임판의 격자가 바뀌지 않았다. Gamemode.js의 state가 Gameboard.js로 전달되지 않아서인데, state를 공통 상위 컴포넌트로 올려도 되지만 이후 게임판의 좌표를 통해서 드래그&amp;amp;드롭되는 위치를 확인할 계획이기 때문에 컴포넌트 간 여러 변수를 공유할 계획으로 전역변수를 위한 Context API를 사용해 보기로 했다.
context/GameData.js
const GameDataContext = createContext({ state: { gamemode : 7, }, actions : { setGamemode: () =&amp;gt; {}, } }) const GameDataProvider = ({ children }) =&amp;gt; { const [gamemode, setGamemode] = useState(7) const context = { state : { gamemode }, actions : { setGamemode } } return ( &amp;lt;GameDataContext.</description>
    </item>
    
    <item>
      <title>React로 블럭 채우기 퍼즐 만들기(1) - 시작, 화면 구성</title>
      <link>https://kms-97.github.io/project/react/blockgame/react_blockgame1/</link>
      <pubDate>Mon, 06 Sep 2021 23:50:00 +0900</pubDate>
      <author>msg016@naver.com (Kim Min Su)</author>
      <guid>https://kms-97.github.io/project/react/blockgame/react_blockgame1/</guid>
      <description>시작 지난 번 작혼 확장프로그램을 리액트로 만들어 본 이후, 리액트와 자바스크립트에 좀 더 익숙해지고자 새로 시도해 볼 토이프로젝트를 고심하던 중 모바일 게임을 보고 구현해보고자 한다.
구상  게임 모드 버튼을 통해 게임판 크기 변경 가능 랜덤으로 생성되는 3가지의 블록을 드래그&amp;amp;드롭을 통해 배치 가로 또는 세로 한 줄이 다 차면 삭제 배치된 블럭 수, 삭제된 라인 또는 블럭 수 등으로 점수 표시  화면 구현 우선 간단하게 화면을 구성해보았다. 하나하나 기능을 구현해 갈 예정이다.</description>
    </item>
    
  </channel>
</rss>
